{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Some helper functions. Mostly clones of rstats functions.","title":"Home"},{"location":"rstats/","text":"rrep A clone of rstats rep Parameters: x ( [ type ] ) \u2013 [description] times ( int , default: 1 ) \u2013 [description]. Defaults to 1. each ( int , default: 1 ) \u2013 [description]. Defaults to 1. length_out ( [ type ] , default: None ) \u2013 [description]. Defaults to None. Returns: \u2013 pyjsta.rrep([1,2,3], 2, 1) rtable A clone of rstats table See https://stackoverflow.com/a/43096495/3362993 Parameters: a ( list ) \u2013 or list-like object. pyjsta.rtable([1,2,3])","title":"rstats clone functions"},{"location":"rstats/#rrep","text":"A clone of rstats rep Parameters: x ( [ type ] ) \u2013 [description] times ( int , default: 1 ) \u2013 [description]. Defaults to 1. each ( int , default: 1 ) \u2013 [description]. Defaults to 1. length_out ( [ type ] , default: None ) \u2013 [description]. Defaults to None. Returns: \u2013 pyjsta.rrep([1,2,3], 2, 1)","title":"rrep"},{"location":"rstats/#rtable","text":"A clone of rstats table See https://stackoverflow.com/a/43096495/3362993 Parameters: a ( list ) \u2013 or list-like object. pyjsta.rtable([1,2,3])","title":"rtable"},{"location":"tables/","text":"plotly_table View or print a pandas DataFrame as a plotly table Parameters: df ( [ type ] ) \u2013 [description] pdf_path ( [ type ] , default: None ) \u2013 [description]. Defaults to None. Returns: \u2013 import pandas as pd # hgt = 400 # wth = hgt * 1.55 df = pd.DataFrame(zip([\"0.01544\"], [\"d\"]), columns = [\"b\", \"c\"]) pyjsta.plotly_table(df, col_format = [\".2f\", \"\"]) md_table View or print a pandas DataFrame as a markdown table Parameters: df ( [ type ] ) \u2013 [description] pdf_path ( [ type ] , default: None ) \u2013 [description] import pandas as pd df = pd.DataFrame(zip([\"a\"], [\"d\"]), columns = [\"b\", \"c\"]) pyjsta.md_table(df, \"test.pdf\")","title":"table functions"},{"location":"tables/#plotly_table","text":"View or print a pandas DataFrame as a plotly table Parameters: df ( [ type ] ) \u2013 [description] pdf_path ( [ type ] , default: None ) \u2013 [description]. Defaults to None. Returns: \u2013 import pandas as pd # hgt = 400 # wth = hgt * 1.55 df = pd.DataFrame(zip([\"0.01544\"], [\"d\"]), columns = [\"b\", \"c\"]) pyjsta.plotly_table(df, col_format = [\".2f\", \"\"])","title":"plotly_table"},{"location":"tables/#md_table","text":"View or print a pandas DataFrame as a markdown table Parameters: df ( [ type ] ) \u2013 [description] pdf_path ( [ type ] , default: None ) \u2013 [description] import pandas as pd df = pd.DataFrame(zip([\"a\"], [\"d\"]), columns = [\"b\", \"c\"]) pyjsta.md_table(df, \"test.pdf\")","title":"md_table"},{"location":"utils/","text":"pdappend Append to csv if file does not exist Parameters: x ( DataFrame ) \u2013 description fpath ( _type_ ) \u2013 description from pyjsta import utils x = pd.DataFrame({\"x\":1}, index=[0]) fpath = \"test.csv\" utils.pdappend(x, fpath) utils.pdappend(x, fpath)","title":"utils functions"},{"location":"utils/#pdappend","text":"Append to csv if file does not exist Parameters: x ( DataFrame ) \u2013 description fpath ( _type_ ) \u2013 description from pyjsta import utils x = pd.DataFrame({\"x\":1}, index=[0]) fpath = \"test.csv\" utils.pdappend(x, fpath) utils.pdappend(x, fpath)","title":"pdappend"}]}